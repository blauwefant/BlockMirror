{
  "__colour": "MATH",
  "__toolbox": false,
  "": [
    "abs(x: Any, /): Any",
    "bin(x: Any, /): str",
    "hash(object, /): int",
    "hex(int, /): str",
    "min(iterable, *, key=None): Any",
    "max(iterable, *, key=None): Any",
    "oct(int, /): str",
    "pow(base, exp, mod=None): Any",
    "round(number: float | int, ndigits: int | None = None): float | int // round(___)",
    "sum(iterable, /, start: float | int = 0): float | int",
    "divmod(a: float | int, b: float | int): tuple[int, float]"
  ],
  "class numbers.Number": [],
  "class numbers.Complex(numbers.Number)": [
    "conjugate(self): numbers.Complex"
  ],
  "class numbers.Real(numbers.Complex)": [],
  "class numbers.Rational(numbers.Real)": [],
  "class numbers.Integral(numbers.Rational)": [],
  "class complex(numbers.Complex)": [
    "__init__(self, real=0, /, imag=0): "
  ],
  "class float(numbers.Real)": [
    "__init__(self, value: float | str = 0.0, /): None",
    "as_integer_ratio(self): tuple[int, int]",
    "fromhex(cls, string: str): float // fromhex(___)",
    "hex(): str",
    "is_integer(self): bool"
  ],
  "class int(numbers.Integral)": [
    "__init__(self, value: int | str = 0, /, base: int = 10): None",
    "as_integer_ratio(self): tuple[int, int]",
    "bit_length(self): int",
    "from_bytes(cls, bytes, byteorder: str = \"big\", *, signed: bool = False): int // from_bytes(___)",
    "to_bytes(self, length: int = 1, byteorder: str =\"big\", *, signed: bool = False): bytes",
    "is_integer(self): bool"
  ]
}